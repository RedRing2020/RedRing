name: CI/CD

on:
  push:
    branches: [main] # メインブランチのみでデプロイメントワークフローを実行
  pull_request:
    branches: [main]

# GitHub Pages デプロイ用の権限設定（mainブランチのみ）
permissions:
  contents: read
  pages: write
  id-token: write

# GitHub Pages デプロイのコンカレンシー制御
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build-test:
    name: Build & Test (matrix)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        feature-set: [default, strict]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache
        uses: Swatinem/rust-cache@v2
      - name: Build
        run: |
          if [ "${{ matrix.feature-set }}" = "strict" ]; then
            # Deny deprecated symbols globally
            export RUSTFLAGS="-D deprecated"
            cargo build --workspace --all-targets
          else
            cargo build --workspace --all-targets
          fi
      - name: Clippy (deny warnings)
        run: |
          if [ "${{ matrix.feature-set }}" = "strict" ]; then
            export RUSTFLAGS="-D deprecated"
          fi
          cargo clippy --workspace --all-targets -- -D warnings
      - name: Test
        run: |
          if [ "${{ matrix.feature-set }}" = "strict" ]; then
            export RUSTFLAGS="-D deprecated"
            cargo test --workspace
          else
            cargo test --workspace
          fi
      - name: Format check
        if: matrix.feature-set == 'default' || matrix.feature-set == 'strict'
        run: cargo fmt -- --check

  foundation-architecture-scan:
    name: Foundation Architecture Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check Foundation Independence
        run: |
          set -e
          echo "Checking Foundation layer independence..."

          # 1. Foundation層クレートの外部依存性チェック
          echo "Checking foundation/ crates have no external dependencies..."
          for foundation_crate in foundation/*/; do
            if [ -f "$foundation_crate/Cargo.toml" ]; then
              echo "Checking $foundation_crate"
              
              # [dependencies]セクションから実際の依存関係行のみを抽出
              # awk を使用してより確実にセクションを処理
              deps_found=$(awk '
                /^\[dependencies\]/ { in_deps = 1; next }
                /^\[/ && in_deps { in_deps = 0 }
                in_deps && /^[a-zA-Z_][a-zA-Z0-9_-]*[[:space:]]*=/ {
                  print $0
                }
              ' "$foundation_crate/Cargo.toml")
              
              if [ -n "$deps_found" ]; then
                echo "❌ Foundation crate $foundation_crate has external dependencies"
                echo "Found dependencies:"
                echo "$deps_found"
                exit 1
              else
                echo "✅ $foundation_crate has no external dependencies"
              fi
            fi
          done
          echo "✅ Foundation layer independence verified"

      - name: Check Core/Extension Foundation Pattern Compliance
        run: |
          set -e
          echo "Checking Core/Extension Foundation pattern compliance..."

          # 1. 禁止: geo_primitives 外からの直接プリミティブインポート（許可パス除く）
          echo "Checking for forbidden direct primitive imports..."

          FORBIDDEN_FOUND=""
          # Exclude documentation, generated files, tests, and permitted paths
          for file in $(find . -name "*.rs" \
            -not -path "./target/*" \
            -not -path "./model/geo_primitives/*" \
            -not -path "./docs/*" \
            -not -path "*/tests/*" \
            -not -name "*test*.rs" \
            -not -name "*example*.rs"); do

            if grep -q "^[[:space:]]*use geo_primitives::" "$file"; then
              # Allow specific permitted paths
              if ! echo "$file" | grep -qE "^\./viewmodel/converter/|^\./model/geo_foundation/|^\./model/geo_io/"; then
                echo "❌ Forbidden import in: $file"
                grep -n "use geo_primitives::" "$file" | head -3
                FORBIDDEN_FOUND="true"
              fi
            fi
          done

          if [ -n "$FORBIDDEN_FOUND" ]; then
            echo "Forbidden direct geo_primitives import outside geo_primitives crate"
            exit 1
          fi

          # 2. 禁止: Core Foundation を経由しない低レベルアクセス
          echo "Checking for deprecated low-level geometry access..."
          ! grep -R "use geo_core::" -n --exclude-dir target --exclude-dir model/geo_core --exclude-dir .github . || (echo "Deprecated geo_core direct import - use geo_foundation instead" && exit 1)

          # 3. 推奨: geo_foundation 経由のアクセスパターン
          echo "Checking foundation-based access patterns..."
          # geo_foundation からのインポートは許可（推奨パターン）
          grep -R "use geo_foundation::" -n --exclude-dir target --exclude-dir .github . > foundation_imports.txt || true
          if [ -s foundation_imports.txt ]; then
            echo "✅ Found proper foundation-based imports:"
            head -5 foundation_imports.txt
          fi

          # 4. 禁止: 旧 geometry モジュールの使用
          echo "Checking for deprecated geometry module usage..."
          ! grep -R "use.*geometry::" -n --exclude-dir target --exclude-dir .github --exclude "*.md" . | grep -v "geo_foundation\|geo_primitives" || (echo "Deprecated geometry module usage - migrate to geo_foundation/geo_primitives" && exit 1)

          echo "✅ Foundation architecture compliance check passed!"

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    # Deploy documentation to GitHub Pages (mainブランチのみ)
    if: github.ref == 'refs/heads/main'
    needs: [build-test, foundation-architecture-scan]

    # GitHub Pages環境の指定（必須）
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # GitHub Pagesデプロイに必要な権限を設定
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: 'latest'

      - name: Build documentation
        run: mdbook build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
