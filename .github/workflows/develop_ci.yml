name: Development CI

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

# Âü∫Êú¨ÁöÑ„Å™Ê®©ÈôêË®≠ÂÆöÔºà„Éá„Éó„É≠„Ç§„É°„É≥„ÉàÊ®©Èôê„Å™„ÅóÔºâ
permissions:
  contents: read
  actions: read

# ‰∏¶Ë°åÂÆüË°åÂà∂Âæ°
concurrency:
  group: develop-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}
          components: clippy, rustfmt

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy lints
        run: cargo clippy --all-targets --all-features --workspace -- -D warnings

      - name: Build workspace
        run: cargo build --workspace --verbose

      - name: Run tests
        run: cargo test --workspace --verbose

      - name: Build documentation
        run: |
          cargo doc --workspace --no-deps --verbose
          echo "‚úÖ Documentation built successfully (develop branch - no deployment)"

  architecture-dependency-check:
    name: Architecture Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Architecture dependency validation
        run: |
          echo "üèóÔ∏è RedRing Architecture Dependency Check"
          echo "üìÖ Date: $(date)"
          echo ""

          ERROR_COUNT=0
          WARNING_COUNT=0

          # Define workspace structure
          declare -A WORKSPACE_CRATES=(
            ["analysis"]="analysis"
            ["geo_foundation"]="model/geo_foundation"
            ["geo_core"]="model/geo_core"
            ["geo_primitives"]="model/geo_primitives"
            ["geo_algorithms"]="model/geo_algorithms"
            ["geo_io"]="model/geo_io"
            ["converter"]="viewmodel/converter"
            ["graphics"]="viewmodel/graphics"
            ["render"]="view/render"
            ["stage"]="view/stage"
            ["app"]="view/app"
          )

          # Define allowed dependencies
          declare -A ALLOWED_DEPS=(
            ["analysis"]=""
            ["geo_foundation"]="analysis"
            ["geo_core"]="geo_foundation analysis"
            ["geo_primitives"]="geo_foundation geo_core analysis"
            ["geo_algorithms"]="geo_foundation geo_core geo_primitives analysis"
            ["geo_io"]="geo_foundation geo_core geo_primitives geo_algorithms analysis"
            ["converter"]="geo_foundation geo_core geo_primitives geo_algorithms geo_io analysis"
            ["graphics"]="geo_foundation geo_core geo_primitives analysis"
            ["render"]="analysis"
            ["stage"]="render analysis"
            ["app"]="converter graphics render stage analysis"
          )

          # Function to get crate dependencies
          get_crate_dependencies() {
            local crate_path="$1"
            local cargo_toml="$crate_path/Cargo.toml"

            if [ ! -f "$cargo_toml" ]; then
              return
            fi

            # Extract workspace dependencies from [dependencies] section
            awk '
              /^\[dependencies\]/ { in_deps = 1; next }
              /^\[/ && in_deps { in_deps = 0 }
              in_deps && /^[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*=/ {
                match($0, /^([a-zA-Z_][a-zA-Z0-9_]*)/, arr)
                dep_name = arr[1]
                # Check if it is a workspace crate
                if (dep_name == "analysis" || dep_name == "geo_foundation" ||
                    dep_name == "geo_core" || dep_name == "geo_primitives" ||
                    dep_name == "geo_algorithms" || dep_name == "geo_io" ||
                    dep_name == "converter" || dep_name == "graphics" ||
                    dep_name == "render" || dep_name == "stage" || dep_name == "app") {
                  print dep_name
                }
              }
            ' "$cargo_toml"
          }

          echo "1Ô∏è‚É£ Model layer naming rule check:"
          MODEL_CRATES=("geo_foundation" "geo_core" "geo_primitives" "geo_algorithms" "geo_io")
          for crate_name in "${MODEL_CRATES[@]}"; do
            if [ -d "${WORKSPACE_CRATES[$crate_name]}" ]; then
              echo "  ‚úÖ $crate_name follows geo_ prefix rule"
            else
              echo "  ‚ùå Required Model crate '$crate_name' not found"
              ((ERROR_COUNT++))
            fi
          done
          echo ""

          echo "2Ô∏è‚É£ Dependency rule check:"
          for crate_name in "${!WORKSPACE_CRATES[@]}"; do
            crate_path="${WORKSPACE_CRATES[$crate_name]}"

            if [ -d "$crate_path" ]; then
              echo "  üîç Checking: $crate_name"

              # Get actual dependencies
              actual_deps=$(get_crate_dependencies "$crate_path")
              allowed_deps="${ALLOWED_DEPS[$crate_name]}"

              if [ -n "$actual_deps" ]; then
                for dep in $actual_deps; do
                  if echo "$allowed_deps" | grep -q "\b$dep\b"; then
                    echo "    ‚úÖ $crate_name -> $dep (allowed)"
                  else
                    echo "    ‚ùå $crate_name -> $dep (not allowed)"
                    ((ERROR_COUNT++))
                  fi
                done
              else
                echo "    ‚ÑπÔ∏è No workspace dependencies"
              fi
            else
              echo "  ‚ö†Ô∏è Crate path not found: $crate_path"
              ((WARNING_COUNT++))
            fi
          done
          echo ""

          echo "3Ô∏è‚É£ Layer dependency summary:"
          declare -A LAYERS=(
            ["Analysis"]="analysis"
            ["Model"]="geo_foundation geo_core geo_primitives geo_algorithms geo_io"
            ["ViewModel"]="converter graphics"
            ["View"]="render stage app"
          )

          for layer_name in "${!LAYERS[@]}"; do
            echo "  üìã $layer_name layer:"
            for crate_name in ${LAYERS[$layer_name]}; do
              if [ -d "${WORKSPACE_CRATES[$crate_name]}" ]; then
                deps=$(get_crate_dependencies "${WORKSPACE_CRATES[$crate_name]}")
                if [ -n "$deps" ]; then
                  echo "    $crate_name -> $deps"
                else
                  echo "    $crate_name -> (no deps)"
                fi
              else
                echo "    $crate_name -> (not found)"
              fi
            done
          done
          echo ""

          echo "4Ô∏è‚É£ Foundation architecture validation:"

          # geo_foundation basic structure check
          if [ -f "model/geo_foundation/Cargo.toml" ]; then
            echo "  ‚úÖ model/geo_foundation/Cargo.toml found"
          else
            echo "  ‚ùå model/geo_foundation/Cargo.toml not found"
            ((ERROR_COUNT++))
          fi

          # TransformError integration check
          if grep -r "TransformError" model/geo_foundation/src/ > /dev/null 2>&1; then
            echo "  ‚úÖ TransformError found in model/geo_foundation"
          else
            echo "  ‚ùå TransformError not found in model/geo_foundation"
            ((ERROR_COUNT++))
          fi

          # Check for duplicate TransformError in geo_primitives
          if grep -r "enum TransformError" model/geo_primitives/src/ > /dev/null 2>&1; then
            echo "  ‚ùå Duplicate TransformError found in model/geo_primitives"
            ((ERROR_COUNT++))
          else
            echo "  ‚úÖ No duplicate TransformError in geo_primitives"
          fi

          # Check for forbidden direct geo_primitives imports
          echo "  üîç Checking for forbidden direct geo_primitives imports..."

          FORBIDDEN_IMPORTS=""
          # Exclude documentation, generated files, and tests from direct import checks
          for file in $(find . -name "*.rs" \
            -not -path "./model/geo_primitives/*" \
            -not -path "./target/*" \
            -not -path "./docs/*" \
            -not -path "./book/*" \
            -not -path "*/tests/*" \
            -not -name "*test*.rs" \
            -not -name "*example*.rs"); do

            if grep -q "^[[:space:]]*use geo_primitives::" "$file"; then
              # Allow specific permitted paths
              if ! echo "$file" | grep -qE "^\./viewmodel/converter/|^\./model/geo_foundation/|^\./model/geo_io/"; then
                echo "    ‚ùå Forbidden import in: $file"
                grep -n "use geo_primitives::" "$file" | head -3
                FORBIDDEN_IMPORTS="found"
                ((ERROR_COUNT++))
              fi
            fi
          done

          if [ -z "$FORBIDDEN_IMPORTS" ]; then
            echo "  ‚úÖ No forbidden direct geo_primitives imports found"
          fi

          # Check documentation files separately (warning only)
          echo "  üìñ Checking documentation files (warnings only)..."
          DOC_IMPORTS=""
          for file in $(find . -name "*.md" -o -path "./docs/*" -o -path "./book/*" 2>/dev/null); do
            if [ -f "$file" ] && grep -q "use geo_primitives::" "$file" 2>/dev/null; then
              echo "    ‚ö†Ô∏è Documentation contains geo_primitives import: $(basename "$file")"
              DOC_IMPORTS="found"
              ((WARNING_COUNT++))
            fi
          done

          if [ -z "$DOC_IMPORTS" ]; then
            echo "  ‚úÖ No geo_primitives imports in documentation"
          fi
          echo ""

          echo "5Ô∏è‚É£ Results:"
          if [ $ERROR_COUNT -eq 0 ] && [ $WARNING_COUNT -eq 0 ]; then
            echo "  üéâ SUCCESS: All architecture dependency checks passed!"
            echo "  ‚úÖ View -> ViewModel -> Model direction maintained"
            echo "  ‚úÖ Model layer naming rules (geo_*) followed"
            echo "  ‚úÖ No forbidden dependencies detected"
            echo "  ‚úÖ Foundation architecture is compliant"
          else
            echo "  üö® FAILED: Architecture dependency issues found"
            echo "  ‚ùå Errors: $ERROR_COUNT"
            echo "  ‚ö†Ô∏è Warnings: $WARNING_COUNT"

            if [ $ERROR_COUNT -gt 0 ]; then
              echo "  üõë Exiting due to detected errors"
              exit 1
            fi
          fi

  check-no-deployment:
    name: Development Branch Status
    runs-on: ubuntu-latest
    needs: [build-test, architecture-dependency-check]

    steps:
      - name: Development branch notification
        run: |
          echo "üöÄ Development CI completed successfully"
          echo "üìã Branch: ${{ github.ref_name }}"
          echo "üîÑ Event: ${{ github.event_name }}"
          echo "‚ÑπÔ∏è  No deployment occurs on development branches"
          echo "üìñ Documentation deployment only occurs on the 'main' branch"
          echo "‚úÖ All development checks passed"
